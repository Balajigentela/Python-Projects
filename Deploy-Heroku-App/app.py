{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " * Serving Flask app \"__main__\" (lazy loading)\n",
      " * Environment: production\n",
      "   WARNING: Do not use the development server in a production environment.\n",
      "   Use a production WSGI server instead.\n",
      " * Debug mode: on\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n",
      "127.0.0.1 - - [10/Nov/2020 08:26:03] \"GET / HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Nov/2020 08:26:04] \"GET /static/style.css HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Nov/2020 08:26:07] \"POST / HTTP/1.1\" 500 -\n",
      "Traceback (most recent call last):\n",
      "  File \"/Users/oindrilasen/anaconda3/lib/python3.7/site-packages/flask/app.py\", line 2309, in __call__\n",
      "    return self.wsgi_app(environ, start_response)\n",
      "  File \"/Users/oindrilasen/anaconda3/lib/python3.7/site-packages/flask/app.py\", line 2295, in wsgi_app\n",
      "    response = self.handle_exception(e)\n",
      "  File \"/Users/oindrilasen/anaconda3/lib/python3.7/site-packages/flask/app.py\", line 1741, in handle_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"/Users/oindrilasen/anaconda3/lib/python3.7/site-packages/flask/_compat.py\", line 35, in reraise\n",
      "    raise value\n",
      "  File \"/Users/oindrilasen/anaconda3/lib/python3.7/site-packages/flask/app.py\", line 2292, in wsgi_app\n",
      "    response = self.full_dispatch_request()\n",
      "  File \"/Users/oindrilasen/anaconda3/lib/python3.7/site-packages/flask/app.py\", line 1815, in full_dispatch_request\n",
      "    rv = self.handle_user_exception(e)\n",
      "  File \"/Users/oindrilasen/anaconda3/lib/python3.7/site-packages/flask/app.py\", line 1718, in handle_user_exception\n",
      "    reraise(exc_type, exc_value, tb)\n",
      "  File \"/Users/oindrilasen/anaconda3/lib/python3.7/site-packages/flask/_compat.py\", line 35, in reraise\n",
      "    raise value\n",
      "  File \"/Users/oindrilasen/anaconda3/lib/python3.7/site-packages/flask/app.py\", line 1813, in full_dispatch_request\n",
      "    rv = self.dispatch_request()\n",
      "  File \"/Users/oindrilasen/anaconda3/lib/python3.7/site-packages/flask/app.py\", line 1799, in dispatch_request\n",
      "    return self.view_functions[rule.endpoint](**req.view_args)\n",
      "  File \"<ipython-input-1-c6923acdbf11>\", line 50, in get_trends\n",
      "    \n",
      "  File \"<ipython-input-1-c6923acdbf11>\", line 18, in gettrends\n",
      "    \n",
      "NameError: name 'get_trends_by_location' is not defined\n",
      "127.0.0.1 - - [10/Nov/2020 08:26:07] \"GET /?__debugger__=yes&cmd=resource&f=style.css HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Nov/2020 08:26:07] \"GET /?__debugger__=yes&cmd=resource&f=debugger.js HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Nov/2020 08:26:07] \"GET /?__debugger__=yes&cmd=resource&f=jquery.js HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Nov/2020 08:26:07] \"GET /?__debugger__=yes&cmd=resource&f=console.png HTTP/1.1\" 200 -\n",
      "127.0.0.1 - - [10/Nov/2020 08:26:07] \"GET /?__debugger__=yes&cmd=resource&f=ubuntu.ttf HTTP/1.1\" 200 -\n"
     ]
    }
   ],
   "source": [
    "# importing the required libraries\n",
    "from flask import Flask, render_template, request, redirect, url_for, Response\n",
    "from flask_table import Table, Col\n",
    "from joblib import load\n",
    "from flask import send_file\n",
    "#import base64\n",
    "from io import BytesIO\n",
    "#import io\n",
    "#import random\n",
    "from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas\n",
    "from matplotlib.figure import Figure\n",
    "import random, threading, webbrowser\n",
    "\n",
    "\n",
    "####------function to get trening tweets----####\n",
    "def gettrends():\n",
    "    # get the twitter trends\n",
    "    df_world_trends = get_trends_by_location(1, 10)\n",
    "    df_world_trends[\"Translated_Trends\"] = [get_translation(val) for val in df_world_trends.Trends]\n",
    "    return df_world_trends[[\"Trends\",\"Language\",\"Translated_Trends\"]]\n",
    "\n",
    "####------ function to get results for a particular text query----####\n",
    "def requestResults(search_keyword):\n",
    "    # get the tweets text\n",
    "    df_tweets = get_related_tweets(search_keyword)\n",
    "    # Predict Emotion for the tweets\n",
    "    df_tweets = predict_emotion(df_tweets)\n",
    "    # Clean the tweets\n",
    "    df_tweets = data_cleaning(df_tweets)\n",
    "\n",
    "    return df_tweets\n",
    "\n",
    "####------ function to create a plot ----####\n",
    "def create_plot():\n",
    "    fig = Figure()\n",
    "    img = df_tweets.Prediction.value_counts().plot(kind = \"bar\")\n",
    "    return fig\n",
    "# start flask\n",
    "app = Flask(__name__)\n",
    "\n",
    "####------render default webpage ----####\n",
    "@app.route('/')\n",
    "def home():\n",
    "    return render_template('home.html')\n",
    "\n",
    "# when the post method detect, then redirect to trends page\n",
    "@app.route('/', methods=['POST', 'GET'])\n",
    "def get_trends():\n",
    "    if request.method == 'POST':\n",
    "        trends = gettrends()\n",
    "        return render_template('trends.html', table=trends.to_html())\n",
    "\n",
    "\n",
    "# when the post method detect, create a url for success\n",
    "@app.route('/get_data', methods=['POST', 'GET'])\n",
    "def get_data():\n",
    "    if request.method == 'POST':\n",
    "        name = request.form['search']\n",
    "        return redirect(url_for('success', name=name))\n",
    "\n",
    "    #create a Plot and send a png file\n",
    "@app.route('/plot_png')\n",
    "def plot_png():\n",
    "    fig = create_plot()\n",
    "    img = BytesIO()\n",
    "    plt.savefig(img)\n",
    "    img.seek(0)\n",
    "    #plot_url = base64.b64encode(img.getvalue())\n",
    "    return send_file(img, mimetype='image/png')\n",
    "\n",
    "####------when the post method detect, then redirect to results page\n",
    "@app.route('/success/<name>')\n",
    "def success(name):\n",
    "    #return \"<xmp>\" + str(requestResults(name)) + \" </xmp> \"\n",
    "    results = requestResults(name)\n",
    "    plot_url = plot_png()\n",
    "    return render_template('results.html', img=plot_url, table=results.to_html())\n",
    "\n",
    "\n",
    "if __name__ == '__main__':\n",
    "    #port = 5000 + random.randint(0, 999)\n",
    "    #print(port)\n",
    "    #url = \"http://127.0.0.1:{0}\".format(port)\n",
    "    #print(url)\n",
    "    #app.run(use_reloader=False, debug=True, port=port)\n",
    "    app.run(use_reloader=False, debug=True)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
